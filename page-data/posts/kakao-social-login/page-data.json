{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/kakao-social-login","result":{"data":{"markdownRemark":{"id":"a58778cc-256f-5391-a8a1-bd04c97353e9","html":"<h3 id=\"카카오-개발자-등록하기\" style=\"position:relative;\"><a href=\"#%EC%B9%B4%EC%B9%B4%EC%98%A4-%EA%B0%9C%EB%B0%9C%EC%9E%90-%EB%93%B1%EB%A1%9D%ED%95%98%EA%B8%B0\" aria-label=\"카카오 개발자 등록하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>카카오 개발자 등록하기</h3>\n<ul>\n<li><a href=\"https://developers.kakao.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Kakao Developers</a> 에 접속하여 개발자 등록을 하고 앱서비스를 등록하고 나면, api 키를 발급받을 수 있다. 우리는 rest api를 사용하므로 rest api 키를 발급받는다. 설정-사용자 관리탭에서 사용자 관리 활성화를 해주고, 서비스에서 사용자들에게 받고 싶은 정보를 설정한다.   </li>\n<li>코드를 리다이렉트 받을 Redirect URI를 설정해야 한다. Third-party(개발한 페이지)에서 user가 로그인을 요청하게 되면 카카오의 로그인 페이지로 이동한다. 사용자가 로그인에 성공하면 다시 Third-party로 돌아가야 하는데\n그 돌아갈 페이지의 주소가 Redirect URI 이다.</li>\n</ul>\n<h3 id=\"액세스-코드-받기\" style=\"position:relative;\"><a href=\"#%EC%95%A1%EC%84%B8%EC%8A%A4-%EC%BD%94%EB%93%9C-%EB%B0%9B%EA%B8%B0\" aria-label=\"액세스 코드 받기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>액세스 코드 받기</h3>\n<ul>\n<li>유저가 정보제공에 동의하고 나면, 코드는 쿼리스트링에 담겨서 redirect uri로 넘어가게 된다.   </li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>views <span class=\"token keyword\">import</span> View \n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>http  <span class=\"token keyword\">import</span> JsonResponse<span class=\"token punctuation\">,</span> HttpResponse   \n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">KakaoLoginView</span><span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        kakao_access_code <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'code'</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>code<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"액세스-토큰-받기\" style=\"position:relative;\"><a href=\"#%EC%95%A1%EC%84%B8%EC%8A%A4-%ED%86%A0%ED%81%B0-%EB%B0%9B%EA%B8%B0\" aria-label=\"액세스 토큰 받기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>액세스 토큰 받기</h3>\n<p>코드를 받았으니 코드를 이용해서 액세스 토큰을 받아와야 한다. 위의 코드에서 리턴 부분을 지우고 다음을 추가한다.   </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">        url <span class=\"token operator\">=</span> <span class=\"token string\">'https://kauth.kakao.com/oauth/token'</span>\n        headers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'Content-type'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'application/x-www-form-urlencoded; charset:utf-8'</span><span class=\"token punctuation\">}</span>\n        body <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'grant_type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'authorization_code'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'client_id'</span><span class=\"token punctuation\">:</span> app_key<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'redirect_uri'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'http://localhost:8000'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'code'</span><span class=\"token punctuation\">:</span> kakao_access_token\n        <span class=\"token punctuation\">}</span>\n        kakao_response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> headers <span class=\"token operator\">=</span> headers<span class=\"token punctuation\">,</span> data <span class=\"token operator\">=</span> body<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>kakao_response<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>지금까지 어떻게 통신이 이뤄지고 프론트앤드에서 어떻게 액세스 토큰을 받게 되는지까지 알아보았다.   </p>\n<h3 id=\"사용자-정보-요청\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%A0%95%EB%B3%B4-%EC%9A%94%EC%B2%AD\" aria-label=\"사용자 정보 요청 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용자 정보 요청</h3>\n<ul>\n<li>사용자 정보 가이드라인에 맞춰 get 요청을 보낸다. </li>\n</ul>\n<h3 id=\"회원가입-로그인-토큰발행\" style=\"position:relative;\"><a href=\"#%ED%9A%8C%EC%9B%90%EA%B0%80%EC%9E%85-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%ED%86%A0%ED%81%B0%EB%B0%9C%ED%96%89\" aria-label=\"회원가입 로그인 토큰발행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>회원가입, 로그인, 토큰발행</h3>\n<ul>\n<li>Social Login은 하나의 EndPoint로 회원가입과 로그인이 모두 이뤄질 수 있다. 우리 서비스에서 소셜로그인을 한 이력이 있는 회원의 경우, DB에 정보를 넣을 필요없이 DB에 있는 회원정보를 불러와 JWT를 발행한 뒤, 로그인 처리를 하면 된다.</li>\n<li>반대로 소셜로그인 이력이 없는 회원의 경우, DB에 필요한 정보를 저장시킨 뒤, 방금 저장시킨 정보를 토대로 JWT를 발행하고 로그인 처리를 하면 된다. 유저 입장에선 회원가입 후 로그인 혹은 그냥 로그인이지만 EndPoint는 하나로 처리하는 것이다. </li>\n<li>\n<p>구현 코드   </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">KakaoSignInView</span><span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    kakao_access_token <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">\"Authorization\"</span><span class=\"token punctuation\">]</span>\n    headers            <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'Authorization'</span><span class=\"token punctuation\">:</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Bearer</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>kakao_access_token<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">}</span>\n    URL                <span class=\"token operator\">=</span> <span class=\"token string\">\"http://kapi.kakao.com/v2/user/me\"</span>\n    response           <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>URL<span class=\"token punctuation\">,</span> headers <span class=\"token operator\">=</span> headers<span class=\"token punctuation\">)</span>\n    kakao_user_info    <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> User<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>social_id <span class=\"token operator\">=</span> kakao_user_info<span class=\"token punctuation\">[</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        user                 <span class=\"token operator\">=</span> User<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>social_id <span class=\"token operator\">=</span> kakao_user_info<span class=\"token punctuation\">[</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        payload              <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"user_id\"</span><span class=\"token punctuation\">:</span>user<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">}</span>\n        encryption_secret    <span class=\"token operator\">=</span> SECRET_KEY\n        algorithm            <span class=\"token operator\">=</span><span class=\"token string\">\"HS256\"</span>\n        encoded_access_token <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">,</span> encryption_secret<span class=\"token punctuation\">,</span> algorithm <span class=\"token operator\">=</span> algorithm<span class=\"token punctuation\">)</span>\n        \n        <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"access_token\"</span><span class=\"token punctuation\">:</span>encoded_access_token<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        User<span class=\"token punctuation\">(</span>\n                social_platform_id <span class=\"token operator\">=</span> User<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>platform <span class=\"token operator\">=</span> <span class=\"token string\">\"kakao\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span>\n                social_id          <span class=\"token operator\">=</span> kakao_user_info<span class=\"token punctuation\">[</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        user                 <span class=\"token operator\">=</span> User<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>social_id <span class=\"token operator\">=</span> kakao_user_info<span class=\"token punctuation\">[</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        payload              <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"user_id\"</span><span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">}</span>\n        encryption_secret    <span class=\"token operator\">=</span> <span class=\"token string\">\"HS256\"</span>\n        encoded_access_token <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">,</span> encryption_secret<span class=\"token punctuation\">,</span> algorithm <span class=\"token operator\">=</span> algorithm<span class=\"token punctuation\">)</span>\n        \n        <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'access_token'</span><span class=\"token punctuation\">:</span>encoded_access_token<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n<h5 id=\"참조\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0\" aria-label=\"참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조:</h5>\n<p><a href=\"https://developers.kakao.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Kakao Developers</a><br>\n<a href=\"https://velog.io/@devzunky/TIL-no.78-Django-Kakao-Social-Login-Back-End-4ik2xay36a\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://velog.io/@devzunky/TIL-no.78-Django-Kakao-Social-Login-Back-End-4ik2xay36a</a>  </p>","fields":{"slug":"/posts/kakao-social-login","tagSlugs":null},"frontmatter":{"date":"2020-02-01T22:40:32.169Z","description":"카카오 소셜로그인을 어떻게 적용할 수 있는지 알아보자.","tags":null,"title":"카카오 소셜로그인 구현하기","socialImage":"#"}}},"pageContext":{"slug":"/posts/kakao-social-login"}}}