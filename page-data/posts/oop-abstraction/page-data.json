{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/oop-abstraction","result":{"data":{"markdownRemark":{"id":"b01e50b9-7586-5be6-bbb5-8aa96364e836","html":"<p>‘추상화’라는 단어는 왠지 미술시간에 얼핏 들었던 것 같은데…(사실 기억안남)<br>\n최근 팀 프로젝트를 하면서 데이터 모델링을 할 때, ‘모델링’에 대해 알아보다가 ‘추상화’라는 단어를 다시 발견하게 되었다. 모델링이란, 살아가면서 나타나는 다양한 현상들을 어떠한 규칙을 가지고 표기하는 것 자체 혹은 단순화, 명확화, 추상화 하는 것!<br>\n그렇다면 객체지향 프로그래밍에서의 추상화는 대체 무엇일까?     </p>\n<h2 id=\"추상화\" style=\"position:relative;\"><a href=\"#%EC%B6%94%EC%83%81%ED%99%94\" aria-label=\"추상화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>추상화</h2>\n<ul>\n<li>사전적 의미: 여러가지 사물이나 개념에서 공통되는 특성이나 속성 따위를 추출하여 파악하는 적용     </li>\n<li>프로그램은 여러 가지의 모듈들로 구성된다. 커다란 소프트웨어를 완성하기 위해서는 어떤 모듈들을 만들어야 하는지를 결정해야 하고, 각 모듈은 어떤 특징을 갖는지를 정해야한다. 이러한 행동을 우리는 ‘추상화한다’고 말한다. 즉, 프로그램을 구성하는 모듈의 중요한 특성이 무엇인지, 무엇을 하는지를 파악하는 것.   </li>\n<li>체계적인 소프트웨어를 만들기 위해서는 코딩하면서 추상화를 하는 것보다는 코딩하기 전에 추상화를 진행하는 것이 좋다. 모듈의 종류를 결정한 후 이들의 알고리즘을 설계하고, 마지막에 코딩하는 것이 가장 이상적이다. (이렇게 프로그램을 만드는 조직을 찾기는 어렵다.)   </li>\n</ul>\n<h2 id=\"객체지향-프로그래밍oop에서-추상화\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8Doop%EC%97%90%EC%84%9C-%EC%B6%94%EC%83%81%ED%99%94\" aria-label=\"객체지향 프로그래밍oop에서 추상화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체지향 프로그래밍(OOP)에서 추상화</h2>\n<ul>\n<li>OOP에서 프로그램은 ‘객체’들로 구성된다.   </li>\n<li>객체는 고유의 필드(field: 객체가 어떤 데이터를 갖는지?)와 메소드(method: 객체가 무슨 일을 하는지?)를 갖는다.   </li>\n<li>OOP에서 추상화는 프로그램을 구성하는 객체들이 어떤 필드들과 메소드들을 갖는지를 (실세계의 객체로부터) 추출함을 의미한다.<br>\nex) 우리가 사람이라는 객체를 구현한다고 가정해보자. 사람이 가질 수 있는 필드와 메소드들은 매우 많다. 하지만 프로그래머가 이들을 모두 구현할 필요는 없고, 그렇게 할 수도 없다. 만들고자 하는 프로그램의 주제가 무엇이냐에 따라 사람이 갖게 될 필드들과 메소드들이 달라진다. 프로그래머는 사람 객체가 실제 사람의 특성 중 어떤 것들을 가져야 하는지를 결정해야한다.</li>\n</ul>\n<h3 id=\"결론적으로-oop에서-추상화를-진행할-때-고려해야-할-사항들은\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0%EC%A0%81%EC%9C%BC%EB%A1%9C-oop%EC%97%90%EC%84%9C-%EC%B6%94%EC%83%81%ED%99%94%EB%A5%BC-%EC%A7%84%ED%96%89%ED%95%A0-%EB%95%8C-%EA%B3%A0%EB%A0%A4%ED%95%B4%EC%95%BC-%ED%95%A0-%EC%82%AC%ED%95%AD%EB%93%A4%EC%9D%80\" aria-label=\"결론적으로 oop에서 추상화를 진행할 때 고려해야 할 사항들은 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론적으로 OOP에서 추상화를 진행할 때 고려해야 할 사항들은</h3>\n<ul>\n<li>어떤 종류의 객체들을 정의할 것인가?   </li>\n<li>각 객체는 어떤 필드들과 메소드들을 갖는가? 이다. </li>\n</ul>\n<h6 id=\"참조-도리안의-프로그램-세계\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0-%EB%8F%84%EB%A6%AC%EC%95%88%EC%9D%98-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EC%84%B8%EA%B3%84\" aria-label=\"참조 도리안의 프로그램 세계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조: <a href=\"http://blog.naver.com/PostView.nhn?blogId=netrance&#x26;logNo=110097062174\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">도리안의 프로그램 세계</a></h6>","fields":{"slug":"/posts/oop-abstraction","tagSlugs":["/tag/추상화/","/tag/object-oriented-programming/","/tag/abstraction/"]},"frontmatter":{"date":"2020-03-06T22:12:03.284Z","description":"'추상화'란 대체 무엇일까? What does abstraction mean in OOP?","tags":["추상화","object oriented programming","abstraction"],"title":"객체지향 프로그래밍(OOP)에서 '추상화'란?","socialImage":"#"}}},"pageContext":{"slug":"/posts/oop-abstraction"}}}