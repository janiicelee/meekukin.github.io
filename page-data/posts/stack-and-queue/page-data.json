{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/stack-and-queue","result":{"data":{"markdownRemark":{"id":"d6cac3d5-b4e0-56ee-94a8-8f00233a996b","html":"<h2 id=\"스택이란\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%83%9D%EC%9D%B4%EB%9E%80\" aria-label=\"스택이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스택이란?</h2>\n<ul>\n<li>데이터의 삽입과 삭제가 저장소의 맨 윗부분에서만 일어나는 자료구조이다.   </li>\n<li>스택은 데이터가 순서대로 저장되고 마지막에 넣은 요소가 제일 먼저 나가는 구조이다.(Last-In, First-Out)      </li>\n<li>연속으로 저장된 데이터구조를 가지고 있고 맨 위 요소에 대한 포인터(주소값)를 갖는 Array나 linked list를 구현할 수 있다.<br>\n스택 예시) 웹브라우저의 방문기록.</li>\n<li>장점: 참조 지역성(한번 참조된 곳은 다시 참조될 확률이 높다)을 활용할 수 있다.</li>\n<li>단점: 데이터를 탐색하기가 어렵다.</li>\n</ul>\n<h3 id=\"스택-adtabstract-data-type\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%83%9D-adtabstract-data-type\" aria-label=\"스택 adtabstract data type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스택 ADT(Abstract Data Type)</h3>\n<ul>\n<li>push (-> None): 맨위에 값 추가.</li>\n<li>pop (-> data): 가장 최근에 넣은 맨 위의 값을 제거.</li>\n<li>peak (-> data or -1): 스택의 변형없이 맨 위의 값을 출력.</li>\n<li>is_empty (-> boolean): 스택이 비어있는지 확인.</li>\n</ul>\n<h3 id=\"스택-구현---list\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%83%9D-%EA%B5%AC%ED%98%84---list\" aria-label=\"스택 구현   list permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스택 구현 - list</h3>\n<p>시간복잡도는 O(1) 이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">In <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">def</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n   <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">:</span>     stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">def</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n   <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">:</span>     <span class=\"token keyword\">return</span> stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n   <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">:</span>     stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n   <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">:</span>     push<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">:</span>     push<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">:</span>     push<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">:</span>     <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span></code></pre></div>\n<h3 id=\"스택-구현---linked-list\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%83%9D-%EA%B5%AC%ED%98%84---linked-list\" aria-label=\"스택 구현   linked list permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스택 구현 - linked list</h3>\n<p>연결리스트는 데이터를 노드 형태로 저장한 것을 말한다. 노드는 데이터와 다음 데이터 주소값을 가진다. 연결리스트의 헤드는 스택의 top을 가리킨다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Stack</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        \n    <span class=\"token keyword\">def</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        new_mode <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n        new_node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n        self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> new_node\n        \n    <span class=\"token keyword\">def</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>is_empty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n        data <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>data\n        self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        <span class=\"token keyword\">return</span> data\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">is_empty</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">peek</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>is_empty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>data</code></pre></div>\n<h2 id=\"큐\" style=\"position:relative;\"><a href=\"#%ED%81%90\" aria-label=\"큐 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>큐?</h2>\n<p>목록 한쪽 끝에서만 자료를 넣고 다른 한쪽 끝에서만 자료를 빼낼 수 있는 자료구조이다. (First-In, First-Out)<br>\n데이터가 입력한 순서대로 처리되어야할 경우에 사용합니다.<br>\n큐에 새로운 데이터가 들어오면 큐 끝에 데이터가 추가되며 enqueue, 삭제될땐 첫번째 위치의 데이터가 삭제된다 dequeue. </p>\n<h3 id=\"큐-구현\" style=\"position:relative;\"><a href=\"#%ED%81%90-%EA%B5%AC%ED%98%84\" aria-label=\"큐 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>큐 구현</h3>\n<p>리스트로 구현하는 것은 가능하나 효율적이지는 않다. 왜냐면 리스트의 맨 처음 원소를 빼거나 더하는 것은 다른 원소들을 한칸씩 이동시켜야 되기 때문에 느리다. 따라서 양끝에서 더하거나 빼는 것이 빠르도록 설계된 collections.deque를 사용하거나 파이썬에서 제공하는 큐 모델을 이용해 구현하는 것이 효율적이다. </p>\n<ul>\n<li>collections.deque<br>\ndeque 는 double-ended queue의 줄인말로, 양 방향에서 데이터를 처리할 수 있는 자료구조이다. 처리속도가 O(1)로 매우 빠르다. </li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> deque\n\ndq <span class=\"token operator\">=</span> deque<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\ndq<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\ndq<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\ndq<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\ndq<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dq<span class=\"token punctuation\">)</span> <span class=\"token comment\">#deque([1,2,3,4])</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dq<span class=\"token punctuation\">.</span>popleft<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#1</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dq<span class=\"token punctuation\">.</span>popleft<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#2</span></code></pre></div>\n<ul>\n<li>module   </li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> queue\n\nq <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span>Queue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nq<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nq<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nq<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nq<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#1</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#2 </span>\n\n<span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> deque\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">(</span>deque<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>popleft<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> node <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>__iter__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span></code></pre></div>","fields":{"slug":"/posts/stack-and-queue","tagSlugs":["/tag/stack/","/tag/queue/","/tag/algorithm/"]},"frontmatter":{"date":"2020-02-25T22:12:03.284Z","description":"자료구조 - 스택과 큐에 대해 알아보자.","tags":["stack","queue","algorithm"],"title":"Stack & Queue","socialImage":"#"}}},"pageContext":{"slug":"/posts/stack-and-queue"}}}