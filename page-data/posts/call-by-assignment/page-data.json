{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/call-by-assignment","result":{"data":{"markdownRemark":{"id":"f4952d83-d34a-5367-8d55-ec63bea13e71","html":"<p>함수의 인자 전달방식이 두가지가 있는데, 어떤 타입을 전달하냐에 따라 달라진다.   </p>\n<h3 id=\"call-by-value-변수를-복사한-값을-전달하는-방식\" style=\"position:relative;\"><a href=\"#call-by-value-%EB%B3%80%EC%88%98%EB%A5%BC-%EB%B3%B5%EC%82%AC%ED%95%9C-%EA%B0%92%EC%9D%84-%EC%A0%84%EB%8B%AC%ED%95%98%EB%8A%94-%EB%B0%A9%EC%8B%9D\" aria-label=\"call by value 변수를 복사한 값을 전달하는 방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Call by value: 변수를 복사한 값을 전달하는 방식</h3>\n<ul>\n<li>함수의 인자(argument)를 받을 때, 변수에 담긴 값 자체를 stack에다가 복사하여 넘겨준다.   </li>\n<li>예를 들어 변수 a가 있고 함수 def1가 있을 때, def1(a)에서 전달받은 a는 a 자체(주소 값)가 아니라 a의 복사 값이다.   </li>\n<li>따라서 함수 내에서 해당 인자를 조작하여 바꾸었다고 해도 원본 변수 a는 변하지 않는다.   </li>\n<li>함수의 사용으로 해당 전역 변수를 바꾸고 싶을 때는 리턴 값을 다시 전역 변수로 집어넣어야 하는 번거로움과 시간 사용의 단점이 있다.   </li>\n</ul>\n<h3 id=\"call-by-reference-인자로-받은-변수의-주소값을-전달\" style=\"position:relative;\"><a href=\"#call-by-reference-%EC%9D%B8%EC%9E%90%EB%A1%9C-%EB%B0%9B%EC%9D%80-%EB%B3%80%EC%88%98%EC%9D%98-%EC%A3%BC%EC%86%8C%EA%B0%92%EC%9D%84-%EC%A0%84%EB%8B%AC\" aria-label=\"call by reference 인자로 받은 변수의 주소값을 전달 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Call by reference: 인자로 받은 변수의 ‘주소값’을 전달</h3>\n<ul>\n<li>함수의 인자를 받을 때, 변수가 가리키는 주소 값을 전달한다.   </li>\n<li>예를 들어 변수 a가 있고 함수 def2가 있을 때, def2(a)에서 전달받은 a는 원본 전역 변수 a의 주소 값이다.   </li>\n<li>따라서 함수 내에서 해당 인자를 조작하면 원본 변수의 주소 값으로 타고 들어가 해당 값 자체를 바꿔버린다.   </li>\n<li>이를 통해 전역 변수의 즉각적 변경이 가능하지만, 부주의하면 변수를 잘못 조작해 프로그램에 문제를 야기할 수 있다.   </li>\n</ul>\n<h3 id=\"그렇다면-파이썬은\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%80\" aria-label=\"그렇다면 파이썬은 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그렇다면 파이썬은?</h3>\n<ul>\n<li>파이썬은 ‘call by assignment’이다.   </li>\n<li>파이썬에서 변수는 특정 메모리 공간을 할당받은 컨테이너 개념이 아니라, 어떤 객체에 붙여진 이름표일 뿐이다.   </li>\n<li>파이썬에서는 global인지 local인지 영역에 따라 변수들의 정보를 저장하는 namespace가 따로 있다.   </li>\n<li>파이썬에서는 모든 것이 객체이고, 객체에는 두가지가 있다.   </li>\n<li>\n<p>Immutable object   </p>\n<ul>\n<li>int, float, str, tuple   </li>\n<li>immutable 객체가 함수의 arguments로 전달되면 처음에는 call by reference로 받지만, 값이 변경되면 call by value로 동작한다.   </li>\n</ul>\n</li>\n<li>\n<p>Mutable object   </p>\n<ul>\n<li>list, dict, set   </li>\n<li>mutable 객체가 함수의 argument로 넘어가면 call by reference로 동작한다. 즉, object reference가 전달되어 actual parameter의 값에 영향을 미칠 수 있다.   </li>\n</ul>\n</li>\n</ul>\n<h5 id=\"참조\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0\" aria-label=\"참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조</h5>\n<ul>\n<li><a href=\"https://aalphaca.tistory.com/4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://aalphaca.tistory.com/4</a></li>\n<li><a href=\"https://wayhome25.github.io/cs/2017/04/11/cs-13/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://wayhome25.github.io/cs/2017/04/11/cs-13/</a></li>\n</ul>","fields":{"slug":"/posts/call-by-assignment","tagSlugs":null},"frontmatter":{"date":"2020-02-05T22:40:32.169Z","description":"파이썬은 call by value일까 call by reference일까","tags":null,"title":"Python - call by assignment","socialImage":"#"}}},"pageContext":{"slug":"/posts/call-by-assignment"}}}